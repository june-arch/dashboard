generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  content    String    @db.LongText
  status     String?   @db.VarChar(255)
  slug       String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  url_video  String?   @db.LongText
  users      users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "articles_user_id_foreign")
  images     images[]
  videos     videos[]

  @@index([user_id], map: "articles_user_id_foreign")
}

model banner_biografi_images {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  banner_biografi_id BigInt           @db.UnsignedBigInt
  path               String           @db.VarChar(255)
  created_at         DateTime?        @db.Timestamp(0)
  updated_at         DateTime?        @db.Timestamp(0)
  banner_biografis   banner_biografis @relation(fields: [banner_biografi_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "banner_biografi_images_banner_biografi_id_foreign")

  @@index([banner_biografi_id], map: "banner_biografi_images_banner_biografi_id_foreign")
}

model banner_biografis {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  name                   String                   @db.VarChar(255)
  deskripsi              String?                  @db.VarChar(255)
  url                    String?                  @db.VarChar(255)
  status                 Boolean                  @default(true)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  banner_biografi_images banner_biografi_images[]
}

model banner_images {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  banner_id  BigInt    @db.UnsignedBigInt
  path       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  banners    banners   @relation(fields: [banner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "banner_images_banner_id_foreign")

  @@index([banner_id], map: "banner_images_banner_id_foreign")
}

model banners {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String          @db.VarChar(255)
  deskripsi     String?         @db.VarChar(255)
  url           String?         @db.VarChar(255)
  status        Boolean         @default(true)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  banner_images banner_images[]
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model images {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt    @db.UnsignedBigInt
  path       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_article_id_foreign")

  @@index([article_id], map: "images_article_id_foreign")
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model roles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @unique(map: "roles_name_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model subdistricts {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name       String     @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  villages   villages[]
}

model user_images {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_images_user_id_foreign")

  @@index([user_id], map: "user_images_user_id_foreign")
}

model users {
  id                BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  role_id           BigInt?       @db.UnsignedBigInt
  name              String        @db.VarChar(255)
  email             String        @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?     @db.Timestamp(0)
  password          String?       @db.VarChar(255)
  remember_token    String?       @db.VarChar(100)
  created_at        DateTime?     @db.Timestamp(0)
  updated_at        DateTime?     @db.Timestamp(0)
  village_id        BigInt?       @db.UnsignedBigInt
  nohp              String?       @db.VarChar(255)
  nik               String?       @db.VarChar(255)
  keterangan        String?       @db.Text
  alamat            String?       @db.Text
  gender            String?       @db.VarChar(255)
  type              String?       @default("user") @db.VarChar(255)
  articles          articles[]
  user_images       user_images[]
  roles             roles?        @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "users_role_id_foreign")
  villages          villages?     @relation(fields: [village_id], references: [id], onUpdate: Restrict, map: "users_village_id_foreign")

  @@index([role_id], map: "users_role_id_foreign")
  @@index([village_id], map: "users_village_id_foreign")
}

model videos {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt    @db.UnsignedBigInt
  path       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "videos_article_id_foreign")

  @@index([article_id], map: "videos_article_id_foreign")
}

model villages {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  name           String       @db.VarChar(255)
  subdistrict_id BigInt       @db.UnsignedBigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  users          users[]
  subdistricts   subdistricts @relation(fields: [subdistrict_id], references: [id], onUpdate: Restrict, map: "villages_subdistrict_id_foreign")

  @@index([subdistrict_id], map: "villages_subdistrict_id_foreign")
}
